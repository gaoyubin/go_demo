// package main

// import (
// 	"container/list"
// )

// /*
// func main() {
// 	l := list.New()
// 	l.PushBack("cannon")
// 	l.PushBack(67)
// 	l.PushBack("first")
// 	for i := l.Front(); i != nil; i = i.Next() {
// 		fmt.Println(i.Value)
// 	}
// }
// */
// type Cache struct {
// 	max_cap int
// 	cur_cap int
// 	ll      *list.List
// 	cache   map[string]*list.Element
// }

// type entry struct {
// 	key   string
// 	value Value
// }
// type Value interface {
// 	Len() int
// }

// func New(max_cap_ int) *Cache {
// 	return &Cache{
// 		max_cap: max_cap_,
// 		cur_cap: 0,
// 		ll:      list.New(),
// 		cache:   make(map[string]*list.Element),
// 	}
// }
// func (c *Cache) Get(key string) (value Value, ok bool) {
// 	if ele, ok := c.cache[key]; ok {
// 		c.ll.MoveToFront(ele)
// 		kv := ele.Value.(*entry)
// 		return kv.value, true

// 	}
// 	return
// }
// func (c *Cache) Add(key string, value Value) {
// 	if ele, ok := c.cache[key]; ok {
// 		c.ll.MoveToFront(ele)
// 		kv := ele.Value.(*entry)
// 		c.cur_cap += value.Len() - kv.value.Len()
// 		kv.value = value
// 	} else {
// 		ele := c.ll.PushFront(&entry{key, value})
// 		c.cache[key] = ele
// 		c.cur_cap += len(key) + value.Len()
// 		for c.max_cap < c.cur_cap {
// 			c.RemoveOldest()
// 		}
// 	}
// }
// func (c *Cache) RemoveOldest() {
// 	ele := c.ll.Back()
// 	if ele != nil {
// 		c.ll.Remove(ele)
// 		kv := ele.Value.(*entry)
// 		delete(c.cache, kv.key)
// 		c.cur_cap -= len(kv.key) + kv.value.Len()
// 	}
// }
